using DXP;
using NLog;
using PCB;
using SCH;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Windows.Forms;

public class Commands
{
    public static readonly Logger _Log = LogManager.GetLogger(Util.SERVERNAME);

    public static ServerPanel GlobalHolderPanel = null;
    //Autogenerated code. Commands implementation. Begin
    //Autogenerated code. Begin of implementation [GetState_HideSelectedNets]
    public void GetState_HideSelectedNets(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_HideSelectedNets]

    //Autogenerated code. Begin of implementation [Command_HideSelectedNets]
    public void Command_HideSelectedNets(IServerDocumentView view, ref string parameters)
    {
        new HideSelectedComponentNets().NetConnect();
    }
    //Autogenerated code. End of implementation [Command_HideSelectedNets]

    //Autogenerated code. Begin of implementation [GetState_FixPDF]
    public void GetState_FixPDF(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_FixPDF]

    //Autogenerated code. Begin of implementation [Command_FixPDF]
    public void Command_FixPDF(IServerDocumentView view, ref string parameters)
    {
        new PDF_Update().Update_PDF_Sch_Links();
    }
    //Autogenerated code. End of implementation [Command_FixPDF]

    //Autogenerated code. Begin of implementation [GetState_ResFinder]
    public void GetState_ResFinder(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_ResFinder]

    //Autogenerated code. Begin of implementation [Command_ResFinder]
    public void Command_ResFinder(IServerDocumentView view, ref string parameters)
    {
        IGUIManager guiManager = DXP.GlobalVars.Client.GetGUIManager();
        if (guiManager == null)
            return;

        if (!guiManager.GetPanelIsOpen(frmResFinder.PanelName))
            guiManager.SetPanelVisibleInCurrentForm(frmResFinder.PanelName, true);
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [Command_ResFinder]

    //Autogenerated code. Begin of implementation [GetState_PlaceReplicate]
    public void GetState_PlaceReplicate(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_PlaceReplicate]

    //Autogenerated code. Begin of implementation [Command_PlaceReplicate]
    public void Command_PlaceReplicate(IServerDocumentView view, ref string parameters)
    {
        IGUIManager guiManager = DXP.GlobalVars.Client.GetGUIManager();
        if (guiManager == null)
            return;

        if (!guiManager.GetPanelIsOpen(frmPlaceReplicate.PanelName))
            guiManager.SetPanelVisibleInCurrentForm(frmPlaceReplicate.PanelName, true);
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [Command_PlaceReplicate]

    //Autogenerated code. Begin of implementation [GetState_RefdesReport]
    public void GetState_RefdesReport(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_RefdesReport]

    //Autogenerated code. Begin of implementation [Command_RefdesReport]
    public void Command_RefdesReport(IServerDocumentView view, ref string parameters)
    {
        new DuplicateRefDes().CheckRefDes();
    }
    //Autogenerated code. End of implementation [Command_RefdesReport]

    //Autogenerated code. Begin of implementation [GetState_DocGrouping]
    public void GetState_DocGrouping(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        switch (argParameters)
        {
            case "Project":
                argChecked = new GenericOptions().GroupEnabled(TDocumentsBarGrouping.dbgByProject);
                break;
            case "Type":
                argChecked = new GenericOptions().GroupEnabled(TDocumentsBarGrouping.dbgByDocKind);
                break;
            case "Disabled":
                argChecked = new GenericOptions().GroupEnabled(TDocumentsBarGrouping.dbgNone);
                break;
            default:
                break;
        }
    }
    //Autogenerated code. End of implementation [GetState_DocGrouping]

    //Autogenerated code. Begin of implementation [Command_DocGrouping]
    public void Command_DocGrouping(IServerDocumentView view, ref string parameters)
    {
        switch (parameters)
        {
            case "Project":
                new GenericOptions().ChangeDocGrouping(TDocumentsBarGrouping.dbgByProject);
                break;
            case "Type":
                new GenericOptions().ChangeDocGrouping(TDocumentsBarGrouping.dbgByDocKind);
                break;
            case "Disabled":
                new GenericOptions().ChangeDocGrouping(TDocumentsBarGrouping.dbgNone);
                break;
            default:
                break;
        }
    }
    //Autogenerated code. End of implementation [Command_DocGrouping]

    //Autogenerated code. Begin of implementation [GetState_LayerStackup]
    public void GetState_LayerStackup(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_LayerStackup]

    //Autogenerated code. Begin of implementation [Command_LayerStackup]
    public void Command_LayerStackup(IServerDocumentView view, ref string parameters)
    {
        new LayerStackTable().PlaceLayerStackTable();
    }
    //Autogenerated code. End of implementation [Command_LayerStackup]



    //Autogenerated code. Begin of implementation [GetState_ShowSelectedNets]
    public void GetState_ShowSelectedNets(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_ShowSelectedNets]

    //Autogenerated code. Begin of implementation [Command_ShowSelectedNets]
    public void Command_ShowSelectedNets(IServerDocumentView view, ref string parameters)
    {
        new ShowSelectedComponentNets().NetConnect();
    }
    //Autogenerated code. End of implementation [Command_ShowSelectedNets]

    //Autogenerated code. Begin of implementation [GetState_ViaReplace]
    public void GetState_ViaReplace(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_ViaReplace]

    //Autogenerated code. Begin of implementation [Command_ViaReplace]
    public void Command_ViaReplace(IServerDocumentView view, ref string parameters)
    {
        IGUIManager guiManager = DXP.GlobalVars.Client.GetGUIManager();
        if (guiManager == null)
            return;

        if (!guiManager.GetPanelIsOpen(frmViaReplace.PanelName))
            guiManager.SetPanelVisibleInCurrentForm(frmViaReplace.PanelName, true);

    }
    //Autogenerated code. End of implementation [Command_ViaReplace]

    //Autogenerated code. Begin of implementation [GetState_ComponentDensity]
    public void GetState_ComponentDensity(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_ComponentDensity]

    //Autogenerated code. Begin of implementation [Command_ComponentDensity]
    public void Command_ComponentDensity(IServerDocumentView view, ref string parameters)
    {
        new Export().ComponentDensity();
    }
    //Autogenerated code. End of implementation [Command_ComponentDensity]

    //Autogenerated code. Begin of implementation [GetState_DownloadDatasheets]
    public void GetState_DownloadDatasheets(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_DownloadDatasheets]

    //Autogenerated code. Begin of implementation [Command_DownloadDatasheets]
    public void Command_DownloadDatasheets(IServerDocumentView view, ref string parameters)
    {
        new DatasheetDownload().DownloadDatasheets();
    }
    //Autogenerated code. End of implementation [Command_DownloadDatasheets]

    //Autogenerated code. Begin of implementation [GetState_FootprintCompare]
    public void GetState_FootprintCompare(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_FootprintCompare]

    //Autogenerated code. Begin of implementation [Command_FootprintCompare]
    public void Command_FootprintCompare(IServerDocumentView view, ref string parameters)
    {
        new FootprintCompare().CompareFootprints();
    }
    //Autogenerated code. End of implementation [Command_FootprintCompare]

    //Autogenerated code. Begin of implementation [GetState_AssignNet]
    public void GetState_AssignNet(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_AssignNet]

    //Autogenerated code. Begin of implementation [Command_AssignNet]
    public void Command_AssignNet(IServerDocumentView view, ref string parameters)
    {
        new AssignNetClss().AssignNet();
    }
    //Autogenerated code. End of implementation [Command_AssignNet]

    //Autogenerated code. Begin of implementation [GetState_ToggleLoopRemoval]
    public void GetState_ToggleLoopRemoval(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {

        IPCB_SystemOptions PCBSystemOptions;

        PCBSystemOptions = PCB.GlobalVars.PCBServer.GetState_SystemOptions();
        if (PCBSystemOptions == null) return;

        argChecked = PCBSystemOptions.GetState_LoopRemoval();
    }
    //Autogenerated code. End of implementation [GetState_ToggleLoopRemoval]

    //Autogenerated code. Begin of implementation [Command_ToggleLoopRemoval]
    public void Command_ToggleLoopRemoval(IServerDocumentView view, ref string parameters)
    {
        new ToggleLockedObjects().ToggleLoopRemoval();
    }
    //Autogenerated code. End of implementation [Command_ToggleLoopRemoval]

    //Autogenerated code. Begin of implementation [GetState_OpenSchematics]
    public void GetState_OpenSchematics(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_OpenSchematics]

    //Autogenerated code. Begin of implementation [Command_OpenSchematics]
    public void Command_OpenSchematics(IServerDocumentView view, ref string parameters)
    {
        IDXPWorkSpace CurrentWorkspace = DXP.GlobalVars.DXPWorkSpace;
        IDXPProject CurrentProject;
        int LogicalDocumentCount;
        int LoopIterator;
        IDXPDocument CurrentSheet;
        CurrentProject = CurrentWorkspace.DM_FocusedProject();
        LogicalDocumentCount = CurrentProject.DM_LogicalDocumentCount();
        ISch_Document SchDoc;
        IClient Client = DXP.GlobalVars.Client;

        for (LoopIterator = 1; LoopIterator <= LogicalDocumentCount; LoopIterator++)
        {
            CurrentSheet = CurrentProject.DM_LogicalDocuments(LoopIterator - 1);
            if (CurrentSheet.DM_DocumentKind() == "SCH")
            {
                SchDoc = CurrentSheet as ISch_Document;
                //Open document if not already open.
                if (!Client.IsDocumentOpen(CurrentSheet.DM_FullPath()))
                    Client.ShowDocument(Client.OpenDocument("SCH", CurrentSheet.DM_FullPath()));

            }
        }
    }
    //Autogenerated code. End of implementation [Command_OpenSchematics]

    //Autogenerated code. Begin of implementation [GetState_FixRefDesRotation]
    public void GetState_FixRefDesRotation(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_FixRefDesRotation]

    //Autogenerated code. Begin of implementation [Command_FixRefDesRotation]
    public void Command_FixRefDesRotation(IServerDocumentView view, ref string parameters)
    {
        new FixRefdesOrientation().FixRefDesOrientation();
    }
    //Autogenerated code. End of implementation [Command_FixRefDesRotation]

    //Autogenerated code. Begin of implementation [GetState_PIMS]
    public void GetState_PIMS(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_PIMS]

    //Autogenerated code. Begin of implementation [Command_PIMS]
    public void Command_PIMS(IServerDocumentView view, ref string parameters)
    {
        System.Diagnostics.Process.Start("https://pims.space.swri.edu/pims/Custom1Servlet?mode=list&moduleid=1");
    }
    //Autogenerated code. End of implementation [Command_PIMS]

    //Autogenerated code. Begin of implementation [GetState_CSEnable]
    public void GetState_CSEnable(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("WorkspaceManager");
        if (optionsReader.SectionExists("Workspace Preferences\\HighlightMethod"))
            argChecked = optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectMode", false);
        else
            argEnabled = false;
    }
    //Autogenerated code. End of implementation [GetState_CSEnable]

    //Autogenerated code. Begin of implementation [Command_CSEnable]
    public void Command_CSEnable(IServerDocumentView view, ref string parameters)
    {
        bool CurrentState;

        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("WorkspaceManager");
        IOptionsWriter optionsWriter = DXP.Utils.ServerOptionsWriter("WorkspaceManager");

        CurrentState = optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectMode", false); //Get current preference state.
        optionsWriter.WriteBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectMode", !CurrentState); //Invert current preference state.

        //Update changed preferences.
        var schServer = DXP.GlobalVars.Client.GetServerModuleByName("WorkspaceManager");
        if (schServer != null)
            (schServer as IServerOptions).ReloadOptions();
    }
    //Autogenerated code. End of implementation [Command_CSEnable]

    //Autogenerated code. Begin of implementation [GetState_CSMasking]
    public void GetState_CSMasking(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("WorkspaceManager");
        if (optionsReader.SectionExists("Workspace Preferences\\HighlightMethod"))
            if (optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectMode", false) == true)
            {
                argChecked = optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectMasking", false);
                argEnabled = true;
            }
            else
                argEnabled = false;
        else
            argEnabled = false;
    }
    //Autogenerated code. End of implementation [GetState_CSMasking]

    //Autogenerated code. Begin of implementation [Command_CSMasking]
    public void Command_CSMasking(IServerDocumentView view, ref string parameters)
    {
        bool CurrentState;

        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("WorkspaceManager");
        IOptionsWriter optionsWriter = DXP.Utils.ServerOptionsWriter("WorkspaceManager");

        CurrentState = optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectMasking", false); //Get current preference state.
        optionsWriter.WriteBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectMasking", !CurrentState); //Invert current preference state.

        //Update changed preferences.
        var schServer = DXP.GlobalVars.Client.GetServerModuleByName("WorkspaceManager");
        if (schServer != null)
            (schServer as IServerOptions).ReloadOptions();
    }
    //Autogenerated code. End of implementation [Command_CSMasking]

    //Autogenerated code. Begin of implementation [GetState_CSZoom]
    public void GetState_CSZoom(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("WorkspaceManager");
        if (optionsReader.SectionExists("Workspace Preferences\\HighlightMethod"))
            if (optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectMode", false) == true)
            {
                argChecked = optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectZooming", false);
                argEnabled = true;
            }
            else
                argEnabled = false;
        else
            argEnabled = false;
    }
    //Autogenerated code. End of implementation [GetState_CSZoom]

    //Autogenerated code. Begin of implementation [Command_CSZoom]
    public void Command_CSZoom(IServerDocumentView view, ref string parameters)
    {
        bool CurrentState;

        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("WorkspaceManager");
        IOptionsWriter optionsWriter = DXP.Utils.ServerOptionsWriter("WorkspaceManager");

        CurrentState = optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectZooming", false); //Get current preference state.
        optionsWriter.WriteBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectZooming", !CurrentState); //Invert current preference state.

        //Update changed preferences.
        var schServer = DXP.GlobalVars.Client.GetServerModuleByName("WorkspaceManager");
        if (schServer != null)
            (schServer as IServerOptions).ReloadOptions();
    }
    //Autogenerated code. End of implementation [Command_CSZoom]

    //Autogenerated code. Begin of implementation [GetState_CSReposistion]
    public void GetState_CSReposistion(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("WorkspaceManager");
        if (optionsReader.SectionExists("Workspace Preferences\\HighlightMethod"))
            if (optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectMode", false) == true)
            {
                argChecked = optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectReposition", false);
                argEnabled = true;
            }
            else
                argEnabled = false;
        else
            argEnabled = false;
    }
    //Autogenerated code. End of implementation [GetState_CSReposistion]

    //Autogenerated code. Begin of implementation [Command_CSReposistion]
    public void Command_CSReposistion(IServerDocumentView view, ref string parameters)
    {
        bool CurrentState;

        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("WorkspaceManager");
        IOptionsWriter optionsWriter = DXP.Utils.ServerOptionsWriter("WorkspaceManager");

        CurrentState = optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectReposition", false); //Get current preference state.
        optionsWriter.WriteBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectReposition", !CurrentState); //Invert current preference state.

        //Update changed preferences.
        var schServer = DXP.GlobalVars.Client.GetServerModuleByName("WorkspaceManager");
        if (schServer != null)
            (schServer as IServerOptions).ReloadOptions();
    }
    //Autogenerated code. End of implementation [Command_CSReposistion]

    //Autogenerated code. Begin of implementation [GetState_CSFocus]
    public void GetState_CSFocus(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("WorkspaceManager");
        if (optionsReader.SectionExists("Workspace Preferences\\HighlightMethod"))
            if (optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectMode", false) == true)
            {
                argChecked = optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectFocusDocuments", false);
                argEnabled = true;
            }
            else
                argEnabled = false;
        else
            argEnabled = false;
    }
    //Autogenerated code. End of implementation [GetState_CSFocus]

    //Autogenerated code. Begin of implementation [Command_CSFocus]
    public void Command_CSFocus(IServerDocumentView view, ref string parameters)
    {
        bool CurrentState;

        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("WorkspaceManager");
        IOptionsWriter optionsWriter = DXP.Utils.ServerOptionsWriter("WorkspaceManager");

        CurrentState = optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectFocusDocuments", false); //Get current preference state.
        optionsWriter.WriteBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectFocusDocuments", !CurrentState); //Invert current preference state.

        //Update changed preferences.
        var schServer = DXP.GlobalVars.Client.GetServerModuleByName("WorkspaceManager");
        if (schServer != null)
            (schServer as IServerOptions).ReloadOptions();
    }
    //Autogenerated code. End of implementation [Command_CSFocus]

    //Autogenerated code. Begin of implementation [GetState_CSComponents]
    public void GetState_CSComponents(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("WorkspaceManager");
        if (optionsReader.SectionExists("Workspace Preferences\\HighlightMethod"))
            if (optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectMode", false) == true)
            {
                argChecked = optionsReader.ReadBoolean("Workspace Preferences\\CrossSelectMode", "CrossSelectComponents", false);
                argEnabled = true;
            }
            else
                argEnabled = false;
        else
            argEnabled = false;
    }
    //Autogenerated code. End of implementation [GetState_CSComponents]

    //Autogenerated code. Begin of implementation [Command_CSComponents]
    public void Command_CSComponents(IServerDocumentView view, ref string parameters)
    {
        bool CurrentState;

        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("WorkspaceManager");
        IOptionsWriter optionsWriter = DXP.Utils.ServerOptionsWriter("WorkspaceManager");

        CurrentState = optionsReader.ReadBoolean("Workspace Preferences\\CrossSelectMode", "CrossSelectComponents", false); //Get current preference state.
        optionsWriter.WriteBoolean("Workspace Preferences\\CrossSelectMode", "CrossSelectComponents", !CurrentState); //Invert current preference state.

        //Update changed preferences.
        var schServer = DXP.GlobalVars.Client.GetServerModuleByName("WorkspaceManager");
        if (schServer != null)
            (schServer as IServerOptions).ReloadOptions();
    }
    //Autogenerated code. End of implementation [Command_CSComponents]

    //Autogenerated code. Begin of implementation [GetState_CSNets]
    public void GetState_CSNets(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("WorkspaceManager");
        if (optionsReader.SectionExists("Workspace Preferences\\HighlightMethod"))
            if (optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectMode", false) == true)
            {
                argChecked = optionsReader.ReadBoolean("Workspace Preferences\\CrossSelectMode", "CrossSelectNets", false);
                argEnabled = true;
            }
            else
                argEnabled = false;
        else
            argEnabled = false;
    }
    //Autogenerated code. End of implementation [GetState_CSNets]

    //Autogenerated code. Begin of implementation [Command_CSNets]
    public void Command_CSNets(IServerDocumentView view, ref string parameters)
    {
        bool CurrentState;

        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("WorkspaceManager");
        IOptionsWriter optionsWriter = DXP.Utils.ServerOptionsWriter("WorkspaceManager");

        CurrentState = optionsReader.ReadBoolean("Workspace Preferences\\CrossSelectMode", "CrossSelectNets", false); //Get current preference state.
        optionsWriter.WriteBoolean("Workspace Preferences\\CrossSelectMode", "CrossSelectNets", !CurrentState); //Invert current preference state.

        //Update changed preferences.
        var schServer = DXP.GlobalVars.Client.GetServerModuleByName("WorkspaceManager");
        if (schServer != null)
            (schServer as IServerOptions).ReloadOptions();
    }
    //Autogenerated code. End of implementation [Command_CSNets]

    //Autogenerated code. Begin of implementation [GetState_CSPins]
    public void GetState_CSPins(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("WorkspaceManager");
        if (optionsReader.SectionExists("Workspace Preferences\\HighlightMethod"))
            if (optionsReader.ReadBoolean("Workspace Preferences\\HighlightMethod", "CrossSelectMode", false) == true)
            {
                argChecked = optionsReader.ReadBoolean("Workspace Preferences\\CrossSelectMode", "CrossSelectPins", false);
                argEnabled = true;
            }
            else
                argEnabled = false;
        else
            argEnabled = false;
    }
    //Autogenerated code. End of implementation [GetState_CSPins]

    //Autogenerated code. Begin of implementation [Command_CSPins]
    public void Command_CSPins(IServerDocumentView view, ref string parameters)
    {
        bool CurrentState;

        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("WorkspaceManager");
        IOptionsWriter optionsWriter = DXP.Utils.ServerOptionsWriter("WorkspaceManager");

        CurrentState = optionsReader.ReadBoolean("Workspace Preferences\\CrossSelectMode", "CrossSelectPins", false); //Get current preference state.
        optionsWriter.WriteBoolean("Workspace Preferences\\CrossSelectMode", "CrossSelectPins", !CurrentState); //Invert current preference state.

        //Update changed preferences.
        var schServer = DXP.GlobalVars.Client.GetServerModuleByName("WorkspaceManager");
        if (schServer != null)
            (schServer as IServerOptions).ReloadOptions();
    }
    //Autogenerated code. End of implementation [Command_CSPins]

    //Autogenerated code. Begin of implementation [GetState_DoReport]
    public void GetState_DoReport(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_DoReport]

    //Autogenerated code. Begin of implementation [Command_DoReport]
    public void Command_DoReport(IServerDocumentView view, ref string parameters)
    {
        IGUIManager guiManager = DXP.GlobalVars.Client.GetGUIManager();
        if (guiManager == null)
            return;

        if (!guiManager.GetPanelIsOpen(DoFileGen.PanelName))
            guiManager.SetPanelVisibleInCurrentForm(DoFileGen.PanelName, true);
        DXP.Utils.StatusBarSetStateDefault();
        DXP.Utils.PercentFinish();
        return;
    }
    //Autogenerated code. End of implementation [Command_DoReport]

    //Autogenerated code. Begin of implementation [GetState_ExportRules]
    public void GetState_ExportRules(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_ExportRules]

    //Autogenerated code. Begin of implementation [Command_ExportRules]
    public void Command_ExportRules(IServerDocumentView view, ref string parameters)
    {
        new Export().RuleReport();
    }
    //Autogenerated code. End of implementation [Command_ExportRules]

    //Autogenerated code. Begin of implementation [GetState_ExportxSignal]
    public void GetState_ExportxSignal(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_ExportxSignal]

    //Autogenerated code. Begin of implementation [Command_ExportxSignal]
    public void Command_ExportxSignal(IServerDocumentView view, ref string parameters)
    {
        new Export().xSignalReport();
    }
    //Autogenerated code. End of implementation [Command_ExportxSignal]

    //Autogenerated code. Begin of implementation [GetState_OpenDesignNotes]
    public void GetState_OpenDesignNotes(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_OpenDesignNotes]

    //Autogenerated code. Begin of implementation [Command_OpenDesignNotes]
    public void Command_OpenDesignNotes(IServerDocumentView view, ref string parameters)
    {
        new DesignNotes().OpenDesignNotes();
    }
    //Autogenerated code. End of implementation [Command_OpenDesignNotes]

    //Autogenerated code. Begin of implementation [GetState_VariantBOM]
    public void GetState_VariantBOM(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_VariantBOM]

    //Autogenerated code. Begin of implementation [Command_VariantBOM]
    public void Command_VariantBOM(IServerDocumentView view, ref string parameters)
    {
        new Variant_BOM().Create_Variant_BOM();
    }
    //Autogenerated code. End of implementation [Command_VariantBOM]

    //Autogenerated code. Begin of implementation [GetState_VarFootprintSelect]
    public void GetState_VarFootprintSelect(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_VarFootprintSelect]

    //Autogenerated code. Begin of implementation [Command_VarFootprintSelect]
    public void Command_VarFootprintSelect(IServerDocumentView view, ref string parameters)
    {
        IGUIManager guiManager = DXP.GlobalVars.Client.GetGUIManager();
        if (guiManager == null)
            return;

        if (!guiManager.GetPanelIsOpen(FootprintSelect.PanelName))
            guiManager.SetPanelVisibleInCurrentForm(FootprintSelect.PanelName, true);

        //new FootprintSelect().Show();
    }
    //Autogenerated code. End of implementation [Command_VarFootprintSelect]

    //Autogenerated code. Begin of implementation [GetState_ExportVariant]
    public void GetState_ExportVariant(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_ExportVariant]

    //Autogenerated code. Begin of implementation [Command_ExportVariant]
    public void Command_ExportVariant(IServerDocumentView view, ref string parameters)
    {
        new ModBom_IO().Export();
    }
    //Autogenerated code. End of implementation [Command_ExportVariant]

    //Autogenerated code. Begin of implementation [GetState_ImportVariant]
    public void GetState_ImportVariant(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_ImportVariant]

    //Autogenerated code. Begin of implementation [Command_ImportVariant]
    public void Command_ImportVariant(IServerDocumentView view, ref string parameters)
    {
        new ModBom_IO().Show();
    }
    //Autogenerated code. End of implementation [Command_ImportVariant]

    //Autogenerated code. Begin of implementation [GetState_ResetPartRefDesOnPaste]
    public void GetState_ResetPartRefDesOnPaste(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        IOptionsReader optionsReader = DXP.Utils.ServerOptionsReader("SCH");
        argChecked = optionsReader.ReadBoolean("Schematic Preferences", "ResetPartsDesignatorsOnPaste", true);
    }
    //Autogenerated code. End of implementation [GetState_ResetPartRefDesOnPaste]

    //Autogenerated code. Begin of implementation [Command_ResetPartRefDesOnPaste]
    public void Command_ResetPartRefDesOnPaste(IServerDocumentView view, ref string parameters)
    {
        new ToggleResetPartsDesignatorsOnPaste().ToggleResetPartsRefDesOnPaste();
    }
    //Autogenerated code. End of implementation [Command_ResetPartRefDesOnPaste]

    //Autogenerated code. Begin of implementation [GetState_SyncVariant]
    public void GetState_SyncVariant(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_SyncVariant]

    //Autogenerated code. Begin of implementation [Command_SyncVariant]
    public void Command_SyncVariant(IServerDocumentView view, ref string parameters)
    {
        new VariantSync().Show();
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [Command_SyncVariant]

    //Autogenerated code. Begin of implementation [GetState_SetActiveLayer]
    public void GetState_SetActiveLayer(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {

    }
    //Autogenerated code. End of implementation [GetState_SetActiveLayer]

    //Autogenerated code. Begin of implementation [Command_SetActiveLayer]
    public void Command_SetActiveLayer(IServerDocumentView view, ref string parameters)
    {
        IPCB_Primitive obj = null;
        IPCB_Board board = Util.GetCurrentPCB();
        try
        {
            //If a object is already selected, Use it. If not, then get the object under the cursor.
            if (board.GetState_SelectecObjectCount() != 1)
                obj = (IPCB_Primitive)board.GetObjectAtXYAskUserIfAmbiguous(board.GetState_XCursor(), board.GetState_YCursor(), Util.PCBAllObject, PCBConstant.V6AllLayersSet, TEditingAction.eEditAction_Focus);
            if (obj == null)
                obj = (IPCB_Primitive)board.GetLastClickedObject(Util.PCBAllObject, TEditingAction.eEditAction_Select);
            else
                obj = (IPCB_Primitive)board.GetState_SelectecObject(0);

            if (obj == null) return;
            //Set the active layer to that of the selected object layer. Doesnt update the selected layer tab.
            board.SetState_CurrentLayerV7(obj.GetState_V7Layer());

            //Switch to the next layer and back so that the propper layer tab is selected.
            DXP.Utils.RunCommand("PCB:SetCurrentLayer", "LayerName = Next");
            DXP.Utils.RunCommand("PCB:SetCurrentLayer", "LayerName = Previous");

            //Switch to single layer mode.
            //DXP.Utils.RunCommand("PCB:SetupPreferences", "SingleLayerMode=ON");

        }
        catch (Exception ex)
        {
            var sb = new System.Text.StringBuilder();
            sb.AppendLine("");
            sb.AppendLine(ex.ToString());
            _Log.Fatal(sb);
            ErrorMail.LogError("Error in " + System.Reflection.MethodBase.GetCurrentMethod().Name + ".", ex);
        }

    }
    //Autogenerated code. End of implementation [Command_SetActiveLayer]

    //Autogenerated code. Begin of implementation [GetState_HeightReport]
    public void GetState_HeightReport(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        argEnabled = false;

    }
    //Autogenerated code. End of implementation [GetState_HeightReport]

    //Autogenerated code. Begin of implementation [Command_HeightReport]
    public void Command_HeightReport(IServerDocumentView view, ref string parameters)
    {
        //To Do : Insert code here
        new HeightReport().GetReport();
        DXP.Utils.StatusBarSetStateDefault();
    }
    //Autogenerated code. End of implementation [Command_HeightReport]

    //Autogenerated code. Begin of implementation [GetState_TrackUtil]
    public void GetState_TrackUtil(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_TrackUtil]

    //Autogenerated code. Begin of implementation [Command_TrackUtil]
    public void Command_TrackUtil(IServerDocumentView view, ref string parameters)
    {
        //new Track_Util().TrackUtil(new frmTracks(), Track_Util.PanelName);
        IGUIManager guiManager = DXP.GlobalVars.Client.GetGUIManager();
        if (guiManager == null)
            return;

        if (!guiManager.GetPanelIsOpen(frmTracks.PanelName))
            guiManager.SetPanelVisibleInCurrentForm(frmTracks.PanelName, true);
        DXP.Utils.StatusBarSetStateDefault();
        DXP.Utils.PercentFinish();
        return;
    }
    //Autogenerated code. End of implementation [Command_TrackUtil]

    //Autogenerated code. Begin of implementation [GetState_AdjustGridSnap]
    public void GetState_AdjustGridSnap(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_AdjustGridSnap]

    //Autogenerated code. Begin of implementation [Command_AdjustGridSnap]
    public void Command_AdjustGridSnap(IServerDocumentView view, ref string parameters)
    {
        //To Do : Insert code here
        new SCH_GridChange().GridChange(parameters);
        DXP.Utils.StatusBarSetStateDefault();
        DXP.Utils.PercentFinish();
        return;

    }
    //Autogenerated code. End of implementation [Command_AdjustGridSnap]

    //Autogenerated code. Begin of implementation [GetState_BatchOutjob]
    public void GetState_BatchOutjob(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        //To Do : Insert code here
    }
    //Autogenerated code. End of implementation [GetState_BatchOutjob]

    //Autogenerated code. Begin of implementation [Command_BatchOutjob]
    public void Command_BatchOutjob(IServerDocumentView view, ref string parameters)
    {
        new BatchOutjob().StartOutjobBatch();
        DXP.Utils.StatusBarSetStateDefault();
        DXP.Utils.PercentFinish();
        return;
    }
    //Autogenerated code. End of implementation [Command_BatchOutjob]

    //Autogenerated code. Begin of implementation [GetState_Test]
    public void GetState_Test(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {


    }
    //Autogenerated code. End of implementation [GetState_Test]

    //Autogenerated code. Begin of implementation [Command_Test]
    public void Command_Test(IServerDocumentView view, ref string parameters)
    {
        new TestClass().loggerTesting();


        //new PDF_Update().Update_PDF_Sch_Links();
    }
    //Autogenerated code. End of implementation [Command_Test]

    //Autogenerated code. Begin of implementation [GetState_ToggleDesignRule]
    public void GetState_ToggleDesignRule(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {

        ToggleDesignRules clDesignRule = new ToggleDesignRules();
        clDesignRule.RuleName = argParameters;
        argEnabled = clDesignRule.Enabled;
        argChecked = clDesignRule.Status;

    }
    //Autogenerated code. End of implementation [GetState_ToggleDesignRule]

    //Autogenerated code. Begin of implementation [Command_ToggleDesignRule]
    public void Command_ToggleDesignRule(IServerDocumentView view, ref string parameters)
    {
        new ToggleDesignRules().ToggleDesignRule(parameters);
        DXP.Utils.StatusBarSetStateDefault();
        DXP.Utils.PercentFinish();
        return;
    }
    //Autogenerated code. End of implementation [Command_ToggleDesignRule]

    //Autogenerated code. Begin of implementation [GetState_ToggleLockedObjects]
    public void GetState_ToggleLockedObjects(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {

        IPCB_SystemOptions PCBSystemOptions;

        PCBSystemOptions = PCB.GlobalVars.PCBServer.GetState_SystemOptions();
        if (PCBSystemOptions == null) return;

        argChecked = !PCBSystemOptions.GetState_ProtectLockedPrimitives();
    }
    //Autogenerated code. End of implementation [GetState_ToggleLockedObjects]

    //Autogenerated code. Begin of implementation [Command_ToggleLockedObjects]
    public void Command_ToggleLockedObjects(IServerDocumentView view, ref string parameters)
    {
        new ToggleLockedObjects().ToggleProtectLockedObjects();
        DXP.Utils.StatusBarSetStateDefault();
        DXP.Utils.PercentFinish();
        return;
    }
    //Autogenerated code. End of implementation [Command_ToggleLockedObjects]

    //Autogenerated code. Begin of implementation [GetState_ShowHideRefDes]
    public void GetState_ShowHideRefDes(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {
        argEnabled = new ShowHideRefDes().Enabled;
    }
    //Autogenerated code. End of implementation [GetState_ShowHideRefDes]

    //Autogenerated code. Begin of implementation [Command_ShowHideRefDes]
    public void Command_ShowHideRefDes(IServerDocumentView view, ref string parameters)
    {
        bool Show = false;
        bool Discretes = false;
        switch (parameters)
        {
            case "showAll":
                Show = true;
                break;
            case "hideAll":
                Show = false;
                break;
            case "showDiscrete":
                Show = true;
                Discretes = true;
                break;
            case "hideDiscrete":
                Show = false;
                Discretes = true;
                break;
            default:
                DXP.Utils.ShowError("Wrong parameter given. Use 'showAll', 'hideAll', 'showDiscrete' or 'hideDiscrete'.");
                DXP.Utils.StatusBarSetStateDefault();
                DXP.Utils.PercentFinish();
                return;
        }
        new ShowHideRefDes().ShowHide(Util.GetCurrentPCB(), Show, Discretes);
        DXP.Utils.StatusBarSetStateDefault();
        DXP.Utils.PercentFinish();
        return;
    }
    //Autogenerated code. End of implementation [Command_ShowHideRefDes]

    //Autogenerated code. Begin of implementation [GetState_FixEmbededResistors]
    public void GetState_FixEmbededResistors(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {

    }
    //Autogenerated code. End of implementation [GetState_FixEmbededResistors]

    //Autogenerated code. Begin of implementation [Command_FixEmbededResistors]
    public void Command_FixEmbededResistors(IServerDocumentView view, ref string parameters)
    {
        new clFixEmbededResistors().FixEmbededResistors();
        DXP.Utils.StatusBarSetStateDefault();
        DXP.Utils.PercentFinish();
        return;
    }
    //Autogenerated code. End of implementation [Command_FixEmbededResistors]

    //Autogenerated code. Begin of implementation [GetState_OpenExtFile]
    public void GetState_OpenExtFile(IServerDocumentView argContext, ref string argParameters, ref bool argEnabled, ref bool argChecked, ref bool argVisible, ref string argCaption, ref string argImageFile)
    {

    }
    //Autogenerated code. End of implementation [GetState_OpenExtFile]

    //Autogenerated code. Begin of implementation [Command_OpenExtFile]
    public void Command_OpenExtFile(IServerDocumentView view, ref string parameters)
    {
        new OpenExtFile().OpenEXTFile(parameters);
        DXP.Utils.StatusBarSetStateDefault();
        DXP.Utils.PercentFinish();
        return;
    }
    //Autogenerated code. End of implementation [Command_OpenExtFile]

    //Autogenerated code. Commands implementation. End
}

